import { AfterViewInit, Renderer2 } from '@angular/core';
import { MatTable } from '@angular/material/table';
import { CdkTableExporter, DataExtractorService, ServiceLocatorService } from 'cdk-table-exporter';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class MatTableExporterDirective extends CdkTableExporter implements AfterViewInit {
    /**
     * Overriding ngAfterViewInit of TableExporter
     */
    ngAfterViewInit(): void;
    constructor(renderer: Renderer2, serviceLocator: ServiceLocatorService, dataExtractor: DataExtractorService, table: MatTable<any>);
    /**
     * MatTable implementation of getPageCount
     */
    getPageCount(): number;
    /**
     * MatTable implementation of getPageSize
     */
    getPageSize(): number;
    /**
     * MatTable implementation of getCurrentPageIndex
     */
    getCurrentPageIndex(): number;
    /**
     * MatTable implementation of getTotalItemsCount
     */
    getTotalItemsCount(): number;
    /**
     * MatTable implementation of goToPage
     */
    goToPage(index: number): void;
    /**
     * MatTable implementation of getPageChangeObservable
     */
    getPageChangeObservable(): Observable<any>;
    private getDataSource;
    private getPaginator;
    private enablePaginator;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatTableExporterDirective, [null, null, null, { optional: true; host: true; self: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MatTableExporterDirective, "[matTableExporter]", ["matTableExporter"], {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXRhYmxlLWV4cG9ydGVyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJtYXQtdGFibGUtZXhwb3J0ZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRUYWJsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYmxlJztcclxuaW1wb3J0IHsgQ2RrVGFibGVFeHBvcnRlciwgRGF0YUV4dHJhY3RvclNlcnZpY2UsIFNlcnZpY2VMb2NhdG9yU2VydmljZSB9IGZyb20gJ2Nkay10YWJsZS1leHBvcnRlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0VGFibGVFeHBvcnRlckRpcmVjdGl2ZSBleHRlbmRzIENka1RhYmxlRXhwb3J0ZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICAgIC8qKlxyXG4gICAgICogT3ZlcnJpZGluZyBuZ0FmdGVyVmlld0luaXQgb2YgVGFibGVFeHBvcnRlclxyXG4gICAgICovXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIHNlcnZpY2VMb2NhdG9yOiBTZXJ2aWNlTG9jYXRvclNlcnZpY2UsIGRhdGFFeHRyYWN0b3I6IERhdGFFeHRyYWN0b3JTZXJ2aWNlLCB0YWJsZTogTWF0VGFibGU8YW55Pik7XHJcbiAgICAvKipcclxuICAgICAqIE1hdFRhYmxlIGltcGxlbWVudGF0aW9uIG9mIGdldFBhZ2VDb3VudFxyXG4gICAgICovXHJcbiAgICBnZXRQYWdlQ291bnQoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRUYWJsZSBpbXBsZW1lbnRhdGlvbiBvZiBnZXRQYWdlU2l6ZVxyXG4gICAgICovXHJcbiAgICBnZXRQYWdlU2l6ZSgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIE1hdFRhYmxlIGltcGxlbWVudGF0aW9uIG9mIGdldEN1cnJlbnRQYWdlSW5kZXhcclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudFBhZ2VJbmRleCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIE1hdFRhYmxlIGltcGxlbWVudGF0aW9uIG9mIGdldFRvdGFsSXRlbXNDb3VudFxyXG4gICAgICovXHJcbiAgICBnZXRUb3RhbEl0ZW1zQ291bnQoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRUYWJsZSBpbXBsZW1lbnRhdGlvbiBvZiBnb1RvUGFnZVxyXG4gICAgICovXHJcbiAgICBnb1RvUGFnZShpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogTWF0VGFibGUgaW1wbGVtZW50YXRpb24gb2YgZ2V0UGFnZUNoYW5nZU9ic2VydmFibGVcclxuICAgICAqL1xyXG4gICAgZ2V0UGFnZUNoYW5nZU9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcHJpdmF0ZSBnZXREYXRhU291cmNlO1xyXG4gICAgcHJpdmF0ZSBnZXRQYWdpbmF0b3I7XHJcbiAgICBwcml2YXRlIGVuYWJsZVBhZ2luYXRvcjtcclxufVxyXG4iXX0=