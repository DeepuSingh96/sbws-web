import { EventEmitter, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { ExportType } from './export-type';
import { ExcelOptions, Options, TxtOptions } from './options';
import { DataExtractorService } from './services/data-extractor.service';
import { Exporter } from './services/exporters/exporter';
import { ServiceLocatorService } from './services/service-locator.service';
/**
 * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class CdkTableExporter {
    protected renderer: Renderer2;
    private serviceLocator;
    private dataExtractor;
    protected _cdkTable: any;
    private _exporterService;
    hiddenColumns?: Array<number>;
    exporter?: Exporter<Options>;
    exportCompleted: EventEmitter<void>;
    exportStarted: EventEmitter<void>;
    /**
     * Data array which is extracted from nativeTable
     */
    private _data;
    private _isIterating;
    private _initialPageIndex;
    private _isExporting;
    private _subscription;
    private _options?;
    private _selectedRows?;
    constructor(renderer: Renderer2, serviceLocator: ServiceLocatorService, dataExtractor: DataExtractorService, _cdkTable: any);
    /**
     * Must return the number of pages of the table
     */
    abstract getPageCount(): number;
    /**
     * Must return the number of items to display on a page
     */
    abstract getPageSize(): number;
    /**
     * Must return the index of the current page that's displayed
     */
    abstract getCurrentPageIndex(): number;
    /**
     * Must return the total number of items in the table
     */
    abstract getTotalItemsCount(): number;
    /**
     * When called, the CdkTable should render the rows inside the page whose index given as parameter
     * @param index page index
     */
    abstract goToPage(index: number): void;
    /**
     * Must return an observable that notifies the subscribers about page changes
     */
    abstract getPageChangeObservable(): Observable<any>;
    /**
     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages
     */
    exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options | ExcelOptions | TxtOptions): void;
    toggleRow(index: number): void;
    private toggleOn;
    private toggleOff;
    private isToggleOn;
    private loadExporter;
    private exportWithPagination;
    private exportSinglePage;
    private extractDataOnCurrentPage;
    private getSelectedRows;
    private isSelectiveExport;
    private isMasterToggleOn;
    private isMasterToggleOff;
    private compareSelectedRowCount;
    private initPageHandler;
    private exportExtractedData;
    private extractSpecialRows;
    private extractTableHeader;
    private extractTableFooter;
    private hasNextPage;
    private nextPage;
    private getPaginatedRowIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CdkTableExporter, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CdkTableExporter, never, never, { "hiddenColumns": "hiddenColumns"; "exporter": "exporter"; }, { "exportCompleted": "exportCompleted"; "exportStarted": "exportStarted"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXRhYmxlLWV4cG9ydGVyLmQudHMiLCJzb3VyY2VzIjpbImNkay10YWJsZS1leHBvcnRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBFeHBvcnRUeXBlIH0gZnJvbSAnLi9leHBvcnQtdHlwZSc7XHJcbmltcG9ydCB7IEV4Y2VsT3B0aW9ucywgT3B0aW9ucywgVHh0T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XHJcbmltcG9ydCB7IERhdGFFeHRyYWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kYXRhLWV4dHJhY3Rvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXhwb3J0ZXIgfSBmcm9tICcuL3NlcnZpY2VzL2V4cG9ydGVycy9leHBvcnRlcic7XHJcbmltcG9ydCB7IFNlcnZpY2VMb2NhdG9yU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc2VydmljZS1sb2NhdG9yLnNlcnZpY2UnO1xyXG4vKipcclxuICogRXhwb3J0ZXIgY2xhc3MgZm9yIENka1RhYmxlLiBBYnN0cmFjdHMgdGhlIHZhcnlpbmcgYmVoYXZpb3JzIGFtb25nIGRpZmZlcmVudCBDZGtUYWJsZSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBDZGtUYWJsZUV4cG9ydGVyIHtcclxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xyXG4gICAgcHJpdmF0ZSBzZXJ2aWNlTG9jYXRvcjtcclxuICAgIHByaXZhdGUgZGF0YUV4dHJhY3RvcjtcclxuICAgIHByb3RlY3RlZCBfY2RrVGFibGU6IGFueTtcclxuICAgIHByaXZhdGUgX2V4cG9ydGVyU2VydmljZTtcclxuICAgIGhpZGRlbkNvbHVtbnM/OiBBcnJheTxudW1iZXI+O1xyXG4gICAgZXhwb3J0ZXI/OiBFeHBvcnRlcjxPcHRpb25zPjtcclxuICAgIGV4cG9ydENvbXBsZXRlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG4gICAgZXhwb3J0U3RhcnRlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEYXRhIGFycmF5IHdoaWNoIGlzIGV4dHJhY3RlZCBmcm9tIG5hdGl2ZVRhYmxlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2RhdGE7XHJcbiAgICBwcml2YXRlIF9pc0l0ZXJhdGluZztcclxuICAgIHByaXZhdGUgX2luaXRpYWxQYWdlSW5kZXg7XHJcbiAgICBwcml2YXRlIF9pc0V4cG9ydGluZztcclxuICAgIHByaXZhdGUgX3N1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgX29wdGlvbnM/O1xyXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRSb3dzPztcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIHNlcnZpY2VMb2NhdG9yOiBTZXJ2aWNlTG9jYXRvclNlcnZpY2UsIGRhdGFFeHRyYWN0b3I6IERhdGFFeHRyYWN0b3JTZXJ2aWNlLCBfY2RrVGFibGU6IGFueSk7XHJcbiAgICAvKipcclxuICAgICAqIE11c3QgcmV0dXJuIHRoZSBudW1iZXIgb2YgcGFnZXMgb2YgdGhlIHRhYmxlXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGdldFBhZ2VDb3VudCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIE11c3QgcmV0dXJuIHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gZGlzcGxheSBvbiBhIHBhZ2VcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZ2V0UGFnZVNpemUoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNdXN0IHJldHVybiB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgcGFnZSB0aGF0J3MgZGlzcGxheWVkXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGdldEN1cnJlbnRQYWdlSW5kZXgoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNdXN0IHJldHVybiB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSB0YWJsZVxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBnZXRUb3RhbEl0ZW1zQ291bnQoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGNhbGxlZCwgdGhlIENka1RhYmxlIHNob3VsZCByZW5kZXIgdGhlIHJvd3MgaW5zaWRlIHRoZSBwYWdlIHdob3NlIGluZGV4IGdpdmVuIGFzIHBhcmFtZXRlclxyXG4gICAgICogQHBhcmFtIGluZGV4IHBhZ2UgaW5kZXhcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZ29Ub1BhZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIE11c3QgcmV0dXJuIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB0aGUgc3Vic2NyaWJlcnMgYWJvdXQgcGFnZSBjaGFuZ2VzXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGdldFBhZ2VDaGFuZ2VPYnNlcnZhYmxlKCk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgcGFnZSBldmVudCBjaGFpbiB0aHVzIGV4dHJhY3RpbmcgYW5kIGV4cG9ydGluZyBhbGwgdGhlIHJvd3MgaW4gbmF0aXZldGFibGVzIGluIHBhZ2VzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydFRhYmxlKGV4cG9ydFR5cGU/OiBFeHBvcnRUeXBlIHwgJ3hscycgfCAneGxzeCcgfCAnY3N2JyB8ICd0eHQnIHwgJ2pzb24nIHwgJ290aGVyJywgb3B0aW9ucz86IE9wdGlvbnMgfCBFeGNlbE9wdGlvbnMgfCBUeHRPcHRpb25zKTogdm9pZDtcclxuICAgIHRvZ2dsZVJvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIHByaXZhdGUgdG9nZ2xlT247XHJcbiAgICBwcml2YXRlIHRvZ2dsZU9mZjtcclxuICAgIHByaXZhdGUgaXNUb2dnbGVPbjtcclxuICAgIHByaXZhdGUgbG9hZEV4cG9ydGVyO1xyXG4gICAgcHJpdmF0ZSBleHBvcnRXaXRoUGFnaW5hdGlvbjtcclxuICAgIHByaXZhdGUgZXhwb3J0U2luZ2xlUGFnZTtcclxuICAgIHByaXZhdGUgZXh0cmFjdERhdGFPbkN1cnJlbnRQYWdlO1xyXG4gICAgcHJpdmF0ZSBnZXRTZWxlY3RlZFJvd3M7XHJcbiAgICBwcml2YXRlIGlzU2VsZWN0aXZlRXhwb3J0O1xyXG4gICAgcHJpdmF0ZSBpc01hc3RlclRvZ2dsZU9uO1xyXG4gICAgcHJpdmF0ZSBpc01hc3RlclRvZ2dsZU9mZjtcclxuICAgIHByaXZhdGUgY29tcGFyZVNlbGVjdGVkUm93Q291bnQ7XHJcbiAgICBwcml2YXRlIGluaXRQYWdlSGFuZGxlcjtcclxuICAgIHByaXZhdGUgZXhwb3J0RXh0cmFjdGVkRGF0YTtcclxuICAgIHByaXZhdGUgZXh0cmFjdFNwZWNpYWxSb3dzO1xyXG4gICAgcHJpdmF0ZSBleHRyYWN0VGFibGVIZWFkZXI7XHJcbiAgICBwcml2YXRlIGV4dHJhY3RUYWJsZUZvb3RlcjtcclxuICAgIHByaXZhdGUgaGFzTmV4dFBhZ2U7XHJcbiAgICBwcml2YXRlIG5leHRQYWdlO1xyXG4gICAgcHJpdmF0ZSBnZXRQYWdpbmF0ZWRSb3dJbmRleDtcclxufVxyXG4iXX0=